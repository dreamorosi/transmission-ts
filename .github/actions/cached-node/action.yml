name: 'Cached Node'
description: 'A simple action that sets up Node and npm from cache if possible, and then caches the node_modules folder.'
inputs:
  nodeVersion:
    description: 'Node.js version to use'
    default: '22'
  build:
    description: 'Whether to run the build step or not'
    default: 'false'
outputs:
  cache-hit:
    description: 'Whether the cache was hit or not'
    value: ${{ steps.cache-node-modules.outputs.cache-hit }}
runs:
  using: 'composite'
  steps:
    - name: Cache node modules
      id: cache-node-modules
      uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
      with:
        path: '**/node_modules'
        # Use the combo between node version, name, and SHA-256 hash of the lock file as cache key so that
        # if one of them changes the cache is invalidated/discarded
        key: ${{ inputs.nodeVersion }}-${{ inputs.cacheKey }}-${{ hashFiles('./package-lock.json') }}
    - name: Install dependencies
      # We can skip the installation if there was a cache hit
      if: steps.cache-node-modules.outputs.cache-hit != 'true'
      run: npm ci
      shell: bash
    - name: Build packages
      # By default we build the packages, but we can skip this step if the caller wants to
      if: inputs.build == 'true'
      # We check if the build script exists in the package.json file, if it does we run it
      run: |
        if [[ $(jq -r '.scripts.build' package.json) != "null" ]]; then
          npm run build
        else
          echo "No build script found in package.json"
        fi
      shell: bash
